<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
  	 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
 	 http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<!-- ********* 1.上下文组件扫描，将标记的类添加到容器中 ********* -->
		<!-- 在edu.hbuas.programmer包下去扫描所有的类 -->
	<context:component-scan base-package="edu.hbuas.programmer">
		<!-- 使用了@Component、@Repository、@Service注解标记的类，就添加到容器中 -->
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Component" />
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Repository" />
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
	</context:component-scan>


	<!-- ********* 2.配置数据源 ********* -->
		<!-- 加载配数据源配置文件 db.properties -->
	<context:property-placeholder location="classpath:config/db.properties" />
		<!-- 配置 C3P0 数据源，四个必须项 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="jdbcUrl" value="${datasource.connection.url}"/>
		<property name="driverClass" value="${datasource.connection.driver_class}"/>
		<property name="user" value="${datasource.connection.username}"/>
		<property name="password" value="${datasource.connection.password}"/>
	</bean>

	<!-- ********* 3.配置事务管理器（JDBC） ********* -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- ref的值就是上面c3p0数据源的id值 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
		<!-- 启动声明式事务驱动 -->
	<tx:annotation-driven transaction-manager="transactionManager" />


	<!-- ********* 4.配置和MyBatis的整合 ********* -->
		<!-- spring 通过 sqlSessionFactoryBean 获取 sqlSessionFactory 工厂类 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- ref的值就是上面c3p0数据源的id值 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 扫描实体类的包，使用别名 -->
		<property name="typeAliasesPackage" value="edu.hbuas.programmer.entity"></property>
		<!-- 扫描所有与实体对应的映射文件 -->
		<property name="mapperLocations">
			<array>
				<value>classpath:config/mybatis/mapper/admin/*.xml</value>
				<value>classpath:config/mybatis/mapper/home/*.xml</value>
				<value>classpath:config/mybatis/mapper/common/*.xml</value>
			</array>
		</property>
	</bean>

	<!-- 配置扫描DAO包，动态实现DAO接口，注入到 spring 容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="edu.hbuas.programmer.dao" />
		<!-- 注意使用 sqlSessionFactoryBeanName 避免出现spring 扫描组件失效问题 -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 解析json数据的，并不是必须 -->
	<bean id="gson" class="com.google.gson.Gson" scope="prototype"></bean>

</beans>